{"version":3,"sources":["components/images/delete.PNG","components/images/rotate.PNG","components/images/move.PNG","components/images/crafter.PNG","components/images/starter.PNG","components/images/furnace.PNG","components/images/seller.PNG","components/images/transporter.PNG","constants.js","reducer/ButtonReducer.js","reducer/FabricaReducer.js","reducer/CeldaReducer.js","reducer/UserReducer.js","reducer/index.js","componentsLogin/LoginForm.js","actions/CallBackend.js","componentsLogin/LoginPage.js","componentsSeleccionFabrica/Fabrica.js","componentsSeleccionFabrica/CreateFabricaButton.js","componentsSeleccionFabrica/ContainerCreateFabricaButton.js","componentsSeleccionFabrica/UsuarioFabricas.js","componentsSeleccionFabrica/ContainerUsuarioFabrica.js","components/Maquina.js","components/Celda.js","containers/ContainerCelda.js","actions/MaquinaAction.js","components/Fila.js","components/TickButton.js","containers/ContainerTickButton.js","components/SaveButton.js","containers/ContainerSaveButton.js","components/Fabrica.js","containers/ContainerFabrica.js","components/ButtonToolBox.js","components/ToolBox.js","containers/ContainerToolBox.js","actions/ButtonAction.js","components/InfoBox.js","containers/ContainerInfoBox.js","components/App.js","components/RedirectPage.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","botones","image","boton_start","press","id","action","name","price","boton_seller","boton_crafter","boton_furnace","boton_transporter","boton_borrar","boton_rotar","boton_move","configFabrica","numeroFilas","numeroColumnas","gameState","celdas","statusInfoBox","detalle","costo","ganancias","usuario","username","fabricas","idFabricaActual","state","arguments","length","undefined","type","map","t","Object","objectSpread","selectButton","newState","infoBox","convertCeldas","response","i","push","idFila","idColumna","maquina","transportar","c","nextCelda","celda","x","y","direccion","filter","getNextCelda","console","log","materiales","moverMaterial","includes","tickMaquinas","celdasNuevas","moverMaquina","boton","columna","fila","celdaActual","celdaActualArray","getCeldaActual","mover","busquedaCeldaConMaquinaAMover","celdaConMaquina","celdaCopia","miraSiPoneMaquina","miraSiSacaMaquina","rotarMaquina","cambiarPosicionMaquina","ponerMaquina","borrarMaquina","idCelda","crearNuevaFabrica","result","fabrics","fabrica","id_fabrica","nombre","idFabrica","combineReducers","LoginForm","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","target","value","loginUser","react_default","a","createElement","className","onChange","onInputChange","bind","onClick","doLogin","disabled","React","Component","jsonBody","body","headers","Accept","Content-Type","JSON","stringify","postWithJSONBody","method","putWithJSONBody","SAVE_GAME","fetchConstants","LOGIN_USER","CREAR_FABRICA","prefix","loading","ok","error","createAsyncAction","fetchRequest","jsonToAction","json","loadingParams","onSuccess","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","message","wrap","_context","prev","next","sent","_","isFunction","status","statusText","t0","stop","_x","apply","LoginFormConnected","connect","fetch","login","LoginPage","Fabrica","recuperarFabrica","CreateFabricaButton","crearFabrica","connector","fabricaName","FabricaConnected","getFabrica","UsuarioFabricaPage","array","key","dibujarFabricas","ContainerCreateFabricaButton","getMaquinaStyle","Maquina","src","alt","dibujarMaquina","src_components_Maquina","Celda","onClickCelda","doActionsOnSelection","Fila","_Component","inherits","createClass","dibujarCeldas","f","columnas","celdaStore","filas","index","ContainerCelda","TickButton","setInterval","SaveButton","saveGame","saveUsuarioFabrica","dibujarGrilla","botonSeleccionado","buttons","getBotonSelected","grilla","Fila_Fila","ContainerTickButton","ContainerSaveButton","getSelectStyle","ButtonToolBox","ToolBox","onButtonToolClick","components_ButtonToolBox","InfoBox","App","ContainerToolBox","ContainerFabrica","ContainerInfoBox","componentsLogin_LoginPage","ContainerUsuarioFabrica","src_components_App","store","createStore","reducers","compose","applyMiddleware","thunk","element","document","getElementById","Error","render","es","components_RedirectPage"],"mappings":"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","file":"static/js/main.57e80c5e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.6e7a49f4.PNG\";","module.exports = __webpack_public_path__ + \"static/media/rotate.d45efe18.PNG\";","module.exports = __webpack_public_path__ + \"static/media/move.cbfcb2fb.PNG\";","module.exports = __webpack_public_path__ + \"static/media/crafter.42bc2297.PNG\";","module.exports = __webpack_public_path__ + \"static/media/starter.8d09d4f3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/furnace.617ec208.PNG\";","module.exports = __webpack_public_path__ + \"static/media/seller.3d538c9e.PNG\";","module.exports = __webpack_public_path__ + \"static/media/transporter.00687f2e.PNG\";","import boton_borrar      from './components/images/delete.PNG';\nimport boton_rotar       from './components/images/rotate.PNG';\nimport boton_move        from './components/images/move.PNG';\nimport boton_crafter     from './components/images/crafter.PNG';\nimport boton_start       from './components/images/starter.PNG';\nimport boton_furnace     from './components/images/furnace.PNG';\nimport boton_seller      from './components/images/seller.PNG';\nimport boton_transporter from './components/images/transporter.PNG';\n\nexport const initialState = {\n    botones: [\n        {image:boton_start,       press:\"unselected\", id:1, action:\"AGREGAR_MAQUINA\", name:\"Starter\",  price:600 },\n        {image:boton_seller,      press:\"unselected\", id:2, action:\"AGREGAR_MAQUINA\", name:\"Seller\" ,  price:350 },\n        {image:boton_crafter,     press:\"unselected\", id:3, action:\"AGREGAR_MAQUINA\", name:\"Crafter\",  price:450 },\n        {image:boton_furnace,     press:\"unselected\", id:4, action:\"AGREGAR_MAQUINA\", name:\"Furnace\",  price:300},\n        {image:boton_transporter, press:\"unselected\", id:5, action:\"AGREGAR_MAQUINA\", name:\"Transporter\", price:100},\n        {image:boton_borrar,      press:\"unselected\", id:6, action:\"BORRAR\", name:\"\", price:0},\n        {image:boton_rotar,       press:\"unselected\", id:7, action:\"ROTAR\",  name:\"\", price:0},\n        {image:boton_move,        press:\"unselected\", id:8, action:\"MOVER\",  name:\"\", price:0}\n    ],\n    configFabrica: {\n       numeroFilas: 10,\n       numeroColumnas: 8\n    },\n    gameState: {\n        celdas: [],\n        statusInfoBox: {\n            detalle: '',\n            costo: 0,\n            ganancias: 5000\n        }\n    },\n    usuario:{\n        username:'NOT_LOGED',\n        fabricas:[],\n        idFabricaActual:0\n    }\n  };\n  ","\n import { Id, Buttons } from '../types/ButtonType';\n import type { Action } from '../types';\n\nconst selectButton = (botones: Buttons, id: Id): Buttons => {\n\n  return botones.map(t => (t.id !== id ? { ...t, press: 'unselected' } : { ...t, press: 'selected' }));\n\n};\n\n\nconst botones = (state: Buttons = [], action: Action): Buttons => {\n  switch (action.type) {\n    case 'SELECT':\n      return selectButton(state, action.id);\n    default:\n      return state;\n  }\n};\n\n\n\nexport default botones;\n","import { ConfigFabrica } from '../types/GameState';\nimport type { Action } from '../types';\n\n\n\nconst configFabrica = (state: ConfigFabrica = {}, action: Action): ConfigFabrica => {\n\n switch (action.type) {\n   case '@@INIT':\n     return state;\n   default:\n     return state;\n }\n};\n\nexport default configFabrica;","import { Id } from '../types/ButtonType';\nimport type { MaquinaAction, Celdas } from '../types';\nimport type { GameType, StatusInfoBox } from '../types/GameState';\n\n\nconst gameState = (state: GameType = [], action: MaquinaAction): GameType => {\n   \n    switch (action.type) {\n      case 'AGREGAR_MAQUINA':\n        return newState(ponerMaquina(state.celdas, action.boton, action.idCelda, action.idFila, state.statusInfoBox)\n                        , state.statusInfoBox);\n      case 'ROTAR':\n        return newState(rotarMaquina(state.celdas, action.boton, action.idCelda, action.idFila), state.statusInfoBox);\n      case 'BORRAR':\n        return newState(borrarMaquina(state.celdas, action.boton, action.idCelda, action.idFila), state.statusInfoBox);\n      case 'MOVER':\n        return newState(moverMaquina(state.celdas, action.boton, action.idCelda, action.idFila), state.statusInfoBox);\n      case 'TICK':\n        return newState(tickMaquinas(state.celdas, state.statusInfoBox), state.statusInfoBox);\n      case 'GET_FABRICA':\n        return newState(convertCeldas(action.celdas), {detalle: '',costo: 0, ganancias: action.ganancias});\n      default:\n        return state;\n    }\n};\n\nconst newState = (celdas: Celdas, infoBox: StatusInfoBox): GameType => {\n  return {\n            celdas: celdas,\n            statusInfoBox: infoBox\n  }\n}\n\n/* convierne las celdas al formato que el backend espera */\nconst convertCeldas = (celdas) => {\n  const response = [];\n  for (var i=0; i< celdas.length; i++){\n      response.push({ idFila: celdas[i].idFila, id: celdas[i].idColumna , maquina: celdas[i].maquina } );\n  };\n  return response;\n}\n\n/* ****************************************TICK DE MAQUINAS*************************************************** */\n\nconst getNextCelda = (celda: Celda, celdas: Celdas): Celda => {\n\n        var x = celda.id;\n        var y = celda.idFila;\n        if(celda.maquina !== undefined){\n          switch (celda.maquina.direccion) {\n            case 'SUR':\n              x = x + 1;\n              break; \n            case 'NORTE':\n              x = x - 1;\n              break;\n            case 'OESTE':\n              y = y - 1;\n              break;\n            default:\n              y = y + 1;\n              break;\n          }\n          return celdas.filter( c => c.id === x  && c.idFila === y )[0];\n        }else{\n          return celda;\n        }\n   \n}\n\nconst transportar = (c: Celda, celdas: Celdas) => {\n          //Busca a la siguiente celda para ver si se los puede pasar\n          const nextCelda = getNextCelda(c, celdas);\n          //Si la siguiente celda tiene maquina, se los pasa\n          if(nextCelda !== undefined && nextCelda.maquina !== undefined){\n            console.log(\"maquina \"+c.id+\" \"+c.idFila+\" paso \"+c.maquina.materiales+ \n            \" a maquina \"+nextCelda.id+\" \"+nextCelda.idFila);\n            nextCelda.maquina.materiales = nextCelda.maquina.materiales + c.maquina.materiales;\n          }\n          //tenga proxima maquina o no, bota los materiales (se les caen :P) \n          c.maquina.materiales = 0;\n}\n\nconst moverMaterial = (c: Celda, celdas: Celdas, infoBox: StatusInfoBox): Celda => {\n\n    if(c.maquina.image.includes('starter')){\n        /* ********************************* STARTER ***********************************/\n        //Si la maquina es un starter, ve si tiene materiales\n        if(c.maquina.materiales > 0){\n            console.log(\"starter \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n            transportar(c, celdas);\n            console.log(\"starter \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n        }else{\n          //Si no tiene uno, lo crea y lo retiene\n          c.maquina.materiales = c.maquina.materiales + 1;\n        }\n        /* ********************************* STARTER ***********************************/\n    }else{\n      /* ********************************* TRANSPORTER **********************************/\n      if(c.maquina.image.includes('transporter')){\n        //Si la maquina tiene materiales, los trata de pasar a la siguiente celda\n        //Si no tiene, nada hace!\n        if(c.maquina.materiales > 0){\n          console.log(\"trans \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n          transportar(c, celdas);\n          console.log(\"trans \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n        }\n        /* ********************************* TRANSPORTER **********************************/\n      }else{\n        if(c.maquina.image.includes('seller')){\n          if(c.maquina.materiales > 0){\n             console.log(\"seller \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n             infoBox.ganancias = infoBox.ganancias + (c.maquina.materiales * 10);\n             c.maquina.materiales = 0;\n             console.log(\"seller \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n          }\n        }\n      }\n      \n    }\n    return c;\n}\n\n/* TICKEAR UNA MAQUINA */\nconst tickMaquinas = (celdas: Celdas, infoBox: StatusInfoBox): Celdas => {\n   \n    const celdasNuevas = [];\n    for (var i = 0; i <= celdas.length - 1 ; i++) {\n \n      if(celdas[i].maquina !== undefined){\n        celdasNuevas.push(moverMaterial(celdas[i], celdas, infoBox));\n      }else{\n        celdasNuevas.push(celdas[i]);\n      }\n    }\n    return celdasNuevas;\n\n}\n\n/* ****************************************ACCIONES DE CELDAS*************************************************** */\n\nconst getCeldaActual = (celdas: Celdas, columna: Id, fila: Id): Celda => {\n  let celdaActualArray =  celdas.filter(c => c.id === columna && c.idFila === fila);\n  if(celdaActualArray.length !== 0){\n    return celdaActualArray[0];\n  }else{\n    return undefined;\n  }\n}\n\nconst miraSiSacaMaquina = (celdaConMaquina: Celda, celdaActual: Celda): Celda => {\n  if(celdaConMaquina.id === celdaActual.id && celdaConMaquina.idFila === celdaActual.idFila && celdaActual.maquina.mover){\n    celdaActual.maquina = undefined;\n  }\n  return celdaActual;\n}\n\nconst miraSiPoneMaquina = (celda: Celda, columna: Id, fila: Id, celdaConMaquina: Celda): Celda => {\n  if(celda.id === columna && celda.idFila === fila && celdaConMaquina !== undefined){\n    celda.maquina = {direccion: celdaConMaquina.maquina.direccion, \n                     image: celdaConMaquina.maquina.image, \n                     mover: false,\n                     materiales:celdaConMaquina.maquina.materiales }\n  }\n  return celda;\n}\n\n/* MOVER UNA MAQUINA */\nconst moverMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n    const celdaActual = getCeldaActual(celdas,columna, fila);\n    if(celdaActual.maquina !== undefined ){\n       celdaActual.maquina.mover = true;\n       return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n       celdaActual : c ));\n    }else{\n       \n       let busquedaCeldaConMaquinaAMover =  celdas.filter(c => c.maquina !== undefined && c.maquina.mover);\n       let celdaConMaquina = busquedaCeldaConMaquinaAMover[busquedaCeldaConMaquinaAMover.length - 1];\n       if(celdaConMaquina !== undefined){\n        const celdaCopia = {\n          id: celdaConMaquina.id,\n          idFila: celdaConMaquina.idFila,\n          maquina: {\n            direccion: celdaConMaquina.maquina.direccion,\n            image: celdaConMaquina.maquina.image,\n            materiales: celdaConMaquina.maquina.materiales\n          }\n        } \n        return celdas.map(c => ( c.maquina === undefined ? \n        miraSiPoneMaquina(c, columna, fila,celdaCopia ) : \n        miraSiSacaMaquina(celdaConMaquina, c)));\n       }\n       return celdas;\n    }\n};\n\n\n/* ROTA UNA MAQUINA */\nconst rotarMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n  return celdas.map(c => ( c.id === columna && c.idFila === fila && c.maquina !== undefined ? \n    { ...c, maquina: cambiarPosicionMaquina(c.maquina) } : c ));\n}\n\nconst cambiarPosicionMaquina = (maquina: MaquinaType): MaquinaType =>{\n  switch (maquina.direccion) {\n    case 'NORTE':\n      maquina.direccion = 'ESTE';\n      break;\n    case 'ESTE':\n      maquina.direccion = 'SUR';\n      break;\n    case 'SUR':\n      maquina.direccion = 'OESTE';\n      break;\n    case 'OESTE':\n      maquina.direccion = 'NORTE';\n      break;\n    default:\n  }\n  return maquina;\n}\n\n/* PONE UNA MAQUINA */\nconst ponerMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id, infoBox: StatusInfoBox): Celdas => {\n    if(infoBox.ganancias >= boton.price){\n      infoBox.ganancias = infoBox.ganancias - boton.price;\n      return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n      { ...c, maquina: { image: boton.image, direccion: 'SUR', mover: false, materiales:0 }} : c ));\n    }else{\n      return celdas;\n    }\n};\n\n/* BORRA UNA MAQUINA */\nconst borrarMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n  return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n    { ...c, maquina: undefined } : c ));\n};\n\n\n   export default gameState;","\nimport type { Action } from '../types';\nimport type {Usuario} from './types/GameState';\n\nconst crearNuevaFabrica = (state, action) => {\n   const result = [];\n   const fabrics = action.fabrica.fabricas;\n   for (var i=0; i< fabrics.length; i++){\n    result.push({ id_fabrica:fabrics[i].id_fabrica, nombre:fabrics[i].nombre,\n     ganancias: fabrics[i].ganancias, celdas: fabrics[i].celdas} );\n   };\n   return result;\n}\n\nconst usuario = (state = {}, action: Action): Usuario => {\n switch (action.type) {\n   case 'LOGIN_USER_OK':\n     return { username: action.fabrica.username, fabricas: action.fabrica.fabricas, idFabricaActual: state.idFabricaActual };\n   case 'GET_FABRICA':\n     return { username: state.username, fabricas: state.fabricas, idFabricaActual: action.idFabrica };\n   case 'CREAR_FABRICA_OK':\n     return { username: state.username, fabricas: crearNuevaFabrica(state,action), idFabricaActual: 0 };\n   default:\n     return state;\n }\n};\n\nexport default usuario;","import { combineReducers } from 'redux';\n\nimport botones from './ButtonReducer';\nimport configFabrica from  './FabricaReducer';\nimport gameState from './CeldaReducer';\nimport usuario from './UserReducer';\n\nexport default combineReducers({\n    botones, \n    configFabrica,\n    gameState,\n    usuario\n \n});\n","import React from 'react';\n\nexport default class LoginForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: ''\n    };\n  }\n\n  onInputChange(event) {\n    this.setState({...this.state, username: event.target.value})\n  }\n\n  doLogin() {\n    this.props.loginUser(this.state.username)\n  }\n\n  render() {\n    return  <div className=\"login-form\">\n    <input type=\"text\" onChange={this.onInputChange.bind(this)}></input>\n    <button className=\"login\" onClick={this.doLogin.bind(this)} disabled={!this.state.username}>Login</button>\n    </div>\n\n  }\n}","import _ from \"lodash\"\n\nconst jsonBody = body => ({\n    headers: {\n      Accept: 'application/json, text/plain, */*',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  })\n  \n  export const postWithJSONBody = body => ({\n    method: 'POST',\n    ...jsonBody(body)\n  })\n\n  export const putWithJSONBody = body => ({\n    method: 'PUT',\n    ...jsonBody(body)\n  })\n\nexport const SAVE_GAME  = fetchConstants(\"SAVE_GAME\")\n\nexport const LOGIN_USER = fetchConstants(\"LOGIN_USER\")\n\nexport const GET_FABRICA = fetchConstants(\"GET_FABRICA\")\n\nexport const CREAR_FABRICA = fetchConstants(\"CREAR_FABRICA\")\n\n\nexport function fetchConstants(prefix) {\n  return {\n    \"loading\": prefix + \"_LOADING\",\n    \"ok\": prefix + \"_OK\",\n    \"error\": prefix + \"_ERROR\"\n  }\n}\n\n/** Hace el login de un usuario */\nexport function login(username) {\n  return createAsyncAction(\n    () => fetch(\"api/\"+username), \n    LOGIN_USER,\n    json => {return { fabrica: json}},\n    {}\n  );\n}\n\n/** Guarda la fabrica de un usuario en base */\nexport function saveUsuarioFabrica(username,idFabrica,ganancias, celdas) {\n  return createAsyncAction(\n    () => fetch(\"/api/\"+username+\"/fabricas/\"+idFabrica, putWithJSONBody({ganancias, celdas})), \n    SAVE_GAME,\n    json => {return { fabrica: json}},\n    {}\n  );\n}\n\n/** Obtener fabrica */\nexport function getFabrica(ganancias, idFabrica, celdas) {\n  return {\n    type: 'GET_FABRICA',\n    idFabrica,\n    ganancias,\n    celdas\n  };\n}\n\n/** Crear 1  fabrica */\nexport function crearFabrica(username, nombre) {\n\n  return createAsyncAction(\n    () => fetch(\"/api/\"+username+\"/fabrica\", postWithJSONBody({nombre})), \n    CREAR_FABRICA,\n    json => {return { fabrica: json}},\n    {}\n  );\n}\n\nfunction createAsyncAction(fetchRequest, \n    fetchConstants, \n    jsonToAction = json => {return {response: json}},\n    loadingParams = {},\n    onSuccess\n    ) {\n    return async dispatch => {\n      dispatch({ type: fetchConstants.loading, ...loadingParams })\n      try {\n        const response = await fetchRequest();\n        const json = await response.json();\n        //console.log(json);\n        if (response.ok) {\n          dispatch({ type: fetchConstants.ok, ...jsonToAction(json) })\n          if(_.isFunction(onSuccess)){\n            onSuccess(dispatch, json)\n          }\n        } else {\n          const message = json.status ? json.status : response.statusText;\n          dispatch({ type: fetchConstants.error, message: message })\n        }\n      } catch (error) {\n        dispatch({ type: fetchConstants.error, message: error.message});\n      }\n    }\n  }","import React     from 'react';\nimport LoginForm from './LoginForm';\nimport {connect} from 'react-redux';\nimport {login} from '../actions/CallBackend';\nimport '../components/App.css';\n\nexport const mapStateToProps = (state: State) => {\n  return {\n     botones: state.botones,\n     gameState: state.gameState,\n     configFabrica: state.configFabrica,\n     usuario:state.usuario\n\n  }\n};\n\nconst LoginFormConnected = \nconnect(mapStateToProps, dispatch => {return {loginUser: (username) => dispatch(login(username))}})(LoginForm)\n\n\nconst LoginPage = () => (\n\n  <div>\n     <div className=\"Container\">\n        <h1>Wayne's Tech</h1>\n        <div className=\"LoginPage\">      \n            <LoginFormConnected />\n        </div>\n      </div>\n  </div>\n);\n\nexport default LoginPage;","import React from 'react';\n\nexport const Fabrica = ({nombre, ganancias, id, recuperarFabrica, celdas}): Props => (\n    <div className=\"fabrica\" onClick={() => recuperarFabrica(ganancias, id, celdas)} >\n        Nombre: {nombre}, Ganancias: {ganancias}\n    </div>\n);\n\nexport default Fabrica;","import React from 'react';\n\nexport default class CreateFabricaButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: ''\n    };\n  }\n\n  onInputChange(event) {\n    this.setState({...this.state, name: event.target.value})\n  }\n\n  \n\n  doLogin() {\n    this.props.crearFabrica(this.props.usuario.username, this.state.name, 50000)\n  }\n\n  render() {\n    return  <div className=\"crear-fabrica-form\">\n    <input type=\"text\" onChange={this.onInputChange.bind(this)}></input>\n    <button className=\"crearFabrica\" onClick={this.doLogin.bind(this)} disabled={!this.state.name}>Crear</button>\n    </div>\n\n  }\n}","import CreateFabricaButton       from '../componentsSeleccionFabrica/CreateFabricaButton';\nimport { connect }              from 'react-redux';\nimport type { State } from '../types';\nimport {crearFabrica} from '../actions/CallBackend';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n        botones: state.botones,\n        gameState: state.gameState,\n        configFabrica: state.configFabrica,\n        usuario: state.usuario\n    };\n};\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        crearFabrica: (username,fabricaName, ganancias) => {\n           dispatch(crearFabrica(username, fabricaName,ganancias))\n      }\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(CreateFabricaButton);\n","import React     from 'react';\nimport {connect} from 'react-redux';\nimport {getFabrica} from '../actions/CallBackend';\nimport '../components/App.css';\nimport './UsuarioFabrica.css';\nimport Fabrica from '../componentsSeleccionFabrica/Fabrica';\nimport CreateFabricaButton from '../componentsSeleccionFabrica/ContainerCreateFabricaButton';\n\nexport const mapStateToProps = (state: State) => {\n  return {\n     botones: state.botones,\n     gameState: state.gameState,\n     configFabrica: state.configFabrica,\n     usuario:state.usuario\n\n  }\n};\n\nconst FabricaConnected = \nconnect(mapStateToProps, dispatch => \n{return {recuperarFabrica: (ganancias,idFabrica,celdas) => dispatch(getFabrica(ganancias,idFabrica, celdas))}})(Fabrica)\n\n\nconst dibujarFabricas = (fabricas, username) => {\n\n    var array = [];\n    if(fabricas.length <= 0){\n      return <div>Ooh! No tenes ni una fabrica, create una viteh!</div>\n    }else{\n\n      for (var i=0; i< fabricas.length; i++){\n        array.push(\n        <FabricaConnected key={i} \n          nombre={fabricas[i].nombre} \n          ganancias={fabricas[i].ganancias} \n          id={fabricas[i].id_fabrica} \n          celdas={fabricas[i].celdas}\n          username={username}>\n        </FabricaConnected>\n        )\n      }\n    }\n    \n    return array;\n};\n\n\nconst UsuarioFabricaPage = (usuario) => (\n  <div>\n     <div className=\"Container\">\n        <h1>Wayne's Tech</h1>\n        <div className=\"UsuarioFabricaPage\">      \n            {dibujarFabricas(usuario.usuario.fabricas, usuario.usuario.username)}\n        </div>\n        <br/>\n        <CreateFabricaButton/>\n      </div>\n  </div>\n);\n\n\n\nexport default UsuarioFabricaPage;\n","import UsuarioFabricaPage       from '../componentsSeleccionFabrica/UsuarioFabricas';\nimport { connect }              from 'react-redux';\nimport type { State } from '../types';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n        botones: state.botones,\n        gameState: state.gameState,\n        configFabrica: state.configFabrica,\n        usuario: state.usuario\n    };\n};\n\nconst connector = connect(\n    mapStateToProps,\n    null\n);\n  \nexport default connector(UsuarioFabricaPage);\n","import React from 'react';\nimport './Maquina.css';\nimport type {Image} from './Utils';\nimport type {MaquinaDireccion} from './Maquina';\n\nexport type Props = {\n    image: Image,\n    direccion: MaquinaDireccion\n  };\n\n\n  const getMaquinaStyle = (direccion: MaquinaDireccion): string => {\n    switch (direccion) {\n      case 'NORTE':\n        return 'Maquina up';\n      case 'SUR':\n        return 'Maquina down';\n      case 'ESTE':\n        return 'Maquina left';\n      case 'OESTE':\n        return 'Maquina right';\n      default:\n        return 'Maquina up';\n    }\n  };\n\nexport const Maquina = ({image, direccion}): Props => (\n    <div className={getMaquinaStyle(direccion)}>\n        <img src={image} alt=\"maquina\" />\n    </div>\n);\n\nexport default Maquina;","import React from 'react';\nimport './Celda.css';\nimport type {ButtonType} from '../types/ButtonType';\nimport type {Celdas} from '../types/CeldaType';\nimport type {GameType} from '../types/GameState';\nimport type {Id} from '../types/Utils';\nimport type {MaquinaType} from '../types/Maquina';\nimport Maquina from './Maquina';\n\n\nexport type Props = {\n    onClick: () => void,\n    boton: ButtonType,\n    fila: Id,\n    id: Id,\n    maquina: MaquinaType,\n    gameState: GameType\n}\n\nexport const Celda = ({ onClickCelda, boton, id, fila, gameState}: Props) => (\n    \n    <div className=\"celda\" onClick={() => onClickCelda(boton, id, fila)} >\n        { dibujarMaquina(gameState.celdas, id, fila) }                             \n    </div>    \n);\n\nconst dibujarMaquina = (celdas: Celdas, columna: Id, fila: Id ) =>  {\n\n    let celdaActual =  celdas.filter(c => c.id === columna && c.idFila === fila);\n    if(celdaActual.length !== 0 && celdaActual[0].maquina !== undefined ){\n\n        return <Maquina image={celdaActual[0].maquina.image} \n                direccion={celdaActual[0].maquina.direccion}\n                mover={celdaActual[0].maquina.mover}>\n               </Maquina>\n\n    }else{\n        return  <div>\n        {celdaActual[0].id + \" \" + celdaActual[0].idFila}</div>\n    }\n}\n\n\n\n\nexport default Celda;","import { connect }    from 'react-redux';\nimport Celda          from '../components/Celda';\nimport type { State, Dispatch } from '../types';\nimport { ponerMaquina} from '../actions/MaquinaAction';\n\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       botones: state.botones,\n       gameState: state.gameState,\n       configFabrica: state.configFabrica,\n       usuario:state.usuario\n    }\n};\n\nconst doActionsOnSelection = (boton, columna, fila, dispatch) => {\n \n    //setInterval(() => { dispatch(tick());} , 3000);\n    return(\n       ponerMaquina(boton, columna, fila)\n   )\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n         onClickCelda: (boton, columna, fila) => {\n           dispatch(doActionsOnSelection(boton, columna, fila,dispatch))\n      }\n    };\n};\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(Celda);","import type { ButtonType }    from '../types/ButtonType';\nimport type { Id }    from '../types/Utils';\nimport type { MaquinaAction } from '../types/Maquina';\nimport type { Ganancias } from '../types/GameState';\n\nexport const ponerMaquina = (boton: ButtonType, idCelda: Id, idFila: Id, ganancias: Ganancias): MaquinaAction => {\n  return {\n    type: (boton === undefined ? '@@INIT' : boton.action), boton, idCelda, idFila, ganancias\n  };\n};\n\nexport const tick = (): MaquinaAction => {\n  return {\n    type: 'TICK'\n  };\n};\n\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport  Celda  from '../containers/ContainerCelda';\n\n\nimport './Fila.css';\n\nexport class Fila extends Component {\n\n    constructor(props){\n        super (props);\n        this.state = {\n           celdas: []\n        }\n    }\n\n    render () {\n        return (\n        <div className=\"fila\">\n           { this.dibujarCeldas() }\n        </div>   \n        )\n    }  \n\n    getFabricaActual(fabricas, idFabrica) {\n\n        const fabricaActualArray = fabricas.filter( f => f.id_fabrica === idFabrica);\n        return fabricaActualArray[0];\n    }\n\n    dibujarCeldas(){\n        var celdas = [];\n        for (var i=1; i<= this.props.columnas; i++){\n           /*\n            if(this.props.usuario.fabricas.length <= 0){\n                 console.log(\"No habia fabricas en la BDD\");\n                 //Inserta las celdas en el estate inicial de una nueva fabrica\n                if(this.props.celdaStore.length < (this.props.columnas * this.props.filas)){\n                    this.props.celdaStore.push({ id:i , idFila: this.props.index});\n                }\n            }else{\n                //Se trae las celdas del back\n                //Si hay celdas en el back, y aun no se lleno el store de celdas, se llena con los datos del back\n                console.log(\"Habia datos para restaurar\");\n                const fabricaActual = this.getFabricaActual(this.props.usuario.fabricas, this.props.usuario.idFabricaActual);\n                if( fabricaActual.celdas.length > 0 &&\n                    this.props.celdaStore.length <= 0) {\n                    console.log(\"Carga las celdas de BDD\");\n                    const celdasBack = fabricaActual.celdas;\n                    for (var i=0; i< celdasBack.length; i++){\n                        this.props.celdaStore.push({ id: celdasBack[i].idColumna , idFila: celdasBack[i].idFila,\n                           maquina: celdasBack[i].maquina\n                        });\n                    } \n                }\n            }*/\n\n            //Inserta las celdas en el estate inicial de una nueva fabrica\n            if(this.props.celdaStore.length < (this.props.columnas * this.props.filas)){\n                this.props.celdaStore.push({ id:i , idFila: this.props.index});\n            }\n          \n           celdas.push(\n                <Celda key={i}\n                       id={i} \n                       boton={this.props.boton}  \n                       fila={this.props.index} \n                       columna={i} />\n            )\n        }\n        this.celdas= celdas;\n        return celdas;\n    }\n\n}\n\nFila.propTypes = {\n    index : PropTypes.number,\n    columnas: PropTypes.number\n}","import React from 'react';\n\nexport type Props = {\n    onClick: () => void\n}\n\nexport const TickButton = ({ tickMaquinas }: Props) => (\n    <div>\n        <button type=\"button\" className=\"tickButton\" onClick={() => tickMaquinas()} >\n        Start!\n        </button>\n    </div>\n); \n\n\nexport default TickButton;","import { connect }    from 'react-redux';\nimport TickButton     from '../components/TickButton';\nimport type { State,Dispatch } from '../types';\nimport {tick } from '../actions/MaquinaAction';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       gameState: state.gameState,\n       botones: state.botones,\n       configFabrica: state.configFabrica\n\n    };\n};\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        tickMaquinas: () => {\n            setInterval(() => { dispatch(tick());} , 3000);\n      }\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(TickButton);\n  ","import React from 'react';\n\nexport type Props = {\n    saveGame: (idJuego, ganancias, celdas) => void,\n    gameState: GameType,\n    usuario: Usuario\n  \n}\n\n/* convierne las celdas al formato que el backend espera */\nconst convertCeldas = (celdas) => {\n    const response = [];\n    for (var i=0; i< celdas.length; i++){\n        response.push({ idFila: celdas[i].idFila, idColumna: celdas[i].id , maquina: celdas[i].maquina } );\n    };\n    return response;\n}\n\nexport const SaveButton = ({ saveGame, gameState, usuario }: Props) => (\n    <div>\n        <button type=\"button\" className=\"saveButton\" \n            onClick={() => saveGame(usuario.username, usuario.idFabricaActual, gameState.statusInfoBox.ganancias, convertCeldas(gameState.celdas)) } >\n            Save\n        </button>\n    </div>\n); \n\n\nexport default SaveButton;","import { connect }              from 'react-redux';\nimport SaveButton               from '../components/SaveButton';\nimport type { State, Dispatch } from '../types';\nimport { saveUsuarioFabrica }   from '../actions/CallBackend';\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       gameState: state.gameState,\n       botones: state.botones,\n       configFabrica: state.configFabrica,\n       usuario: state.usuario\n\n    };\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        saveGame: (username, idFabrica, ganancias, celdas) => {\n           dispatch(saveUsuarioFabrica(username, idFabrica, ganancias, celdas))\n      }\n    };\n};\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(SaveButton);","import './Fabrica.css';\nimport { Fila } from './Fila';\nimport type {ConfigFabrica, GameType, Usuario} from '../types/GameState';\nimport type { Buttons }     from '../types/ButtonType';\nimport React from 'react';\nimport TickButton  from '../containers/ContainerTickButton';\nimport SaveButton  from '../containers/ContainerSaveButton';\n\nexport type Props = {\n  configFabrica: ConfigFabrica,\n  botones: Buttons,\n  gameState: GameType,\n  usuario: Usuario\n};\n\nexport const Fabrica = ({ configFabrica, botones, gameState, usuario }: Props) => (\n  <div className=\"grilla\">\n      { dibujarGrilla(configFabrica.numeroFilas, configFabrica.numeroColumnas, botones, gameState, usuario)}\n      <div>\n        <TickButton/>\n        <SaveButton/>\n      </div>\n  </div> \n   \n); \n\nconst getBotonSelected = (buttons: Buttons): ButtonType => {\n  let boton =  buttons.filter(f => f.press === 'selected');\n  return (boton.length === 0 ? undefined : boton[0]);\n};\n\nconst dibujarGrilla = (numeroFilas: CantFilas, numeroColumnas: CantColumnas, botones: Buttons, gameState: GameType, usuario:Usuario) => {\n  let botonSeleccionado = getBotonSelected(botones);\n\n  var grilla = [];\n  for (var i = 1; i <= numeroFilas; i++) {\n    grilla.push(\n      <Fila key={i} index={i} usuario={usuario} columnas={numeroColumnas} boton={botonSeleccionado} celdaStore={gameState.celdas} filas={numeroFilas} />\n    );\n  }\n  return grilla;\n};\n\n\nexport default Fabrica;\n","import { connect }    from 'react-redux';\nimport Fabrica        from '../components/Fabrica';\nimport type { State } from '../types';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       gameState: state.gameState,\n       botones: state.botones,\n       configFabrica: state.configFabrica,\n       usuario: state.usuario\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    null\n);\n  \nexport default connector(Fabrica);\n  ","import type  { Image, Press }  from '../types/ButtonType';\nimport './ToolBox.css';\nimport React from 'react'\n\n\nconst getSelectStyle = (press: Press): string => {\n  switch (press) {\n    case 'selected':\n      return 'ButtonToolbox seleccionado';\n    case 'unselected':\n      return 'ButtonToolbox';\n    default:\n      return 'ButtonToolbox';\n  }\n};\n\nexport type Props = {\n  onClick: () => void,\n  press: Press,\n  image: Image\n};\n\nconst ButtonToolBox = ({ onClick, image, press }: Props) => (\n  <div className={getSelectStyle(press)} onClick={onClick}>\n    <img src={image} alt=\"tool\" />\n  </div>\n);\n\nexport default ButtonToolBox;\n","import React from 'react';\nimport  ButtonToolBox   from './ButtonToolBox';\nimport type { Buttons } from '../types/ButtonType';\nimport type {  Id }     from '../types/Utils';\nimport './ToolBox.css';\n\n\nexport type Props = {\n  botones: Buttons,\n  onButtonToolClick: (id: Id) => void\n};\n\n\nexport const ToolBox = ({ botones, onButtonToolClick }: Props) => (\n  <div className=\"ToolBox\">\n    <h3>Máquinas</h3>\n     <table>\n       <tbody>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[0].id, botones[0].name, botones[0].price)}\n                           image={botones[0].image} \n                           press={botones[0].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[1].id, botones[1].name, botones[1].price)}\n                           image={botones[1].image} \n                           press={botones[1].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[2].id, botones[2].name, botones[2].price)}\n                           image={botones[2].image} \n                           press={botones[2].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[3].id, botones[3].name, botones[3].price)}\n                           image={botones[3].image} \n                           press={botones[3].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[4].id, botones[4].name, botones[4].price)}\n                           image={botones[4].image} \n                           press={botones[4].press} />\n           </td>\n         </tr>\n       </tbody>\n     </table>\n    <h3>Edición</h3>\n     <table>\n       <tbody>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[5].id, botones[5].name, botones[5].price)}\n                           image={botones[5].image} \n                           press={botones[5].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[6].id, botones[6].name, botones[6].price)}\n                           image={botones[6].image} \n                           press={botones[6].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[7].id, botones[7].name, botones[7].price)}\n                           image={botones[7].image} \n                           press={botones[7].press} />\n           </td>\n         </tr>\n       </tbody>\n     </table>\n  </div>\n);\n\n\nexport default ToolBox;","import { connect } from 'react-redux';\nimport { selectButton } from '../actions/ButtonAction';\nimport  ToolBox         from '../components/ToolBox';\n\nimport type { State, Dispatch } from '../types';\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       botones: state.botones\n    };\n  };\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        onButtonToolClick: (id, name, price) => {\n            dispatch(selectButton(id, name, price));\n      }\n    };\n};\n  \nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(ToolBox);\n  ","import type { Id, ButtonAction } from '../types/ButtonType';\nimport type { DetalleMaquina, CostoMaquina } from '../types/GameState';\n\nexport const selectButton = (id: Id, name: DetalleMaquina , price: CostoMaquina): ButtonAction => {\n  return {\n    type: 'SELECT',\n    id, name, price\n  };\n};\n","import React, { Component } from 'react';\nimport './InfoBox.css';\n\nexport class InfoBox extends Component {\n\n  render() {\n    return (\n        <div className=\"Infobox\">\n            <h3>Detalles</h3>\n            <div className=\"InfoBoxContenido\">\n              <h2> Ganancias: {\"$ \"+this.props.gameState.statusInfoBox.ganancias + \",00\"}</h2>\n                <div>\n                  {this.props.gameState.statusInfoBox.detalle}\n                </div>\n                <div>\n                  <div>\n                  {(this.props.gameState.statusInfoBox.costo > 0 ? \"$ \"+this.props.gameState.statusInfoBox.costo + \",00\" : '')}                  \n                  </div>\n                </div>\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default InfoBox;\n\n\n","import { connect }    from 'react-redux';\nimport InfoBox        from '../components/InfoBox';\nimport type { State } from '../types';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       configFabrica: state.configFabrica,\n       botones: state.botones,\n       gameState: state.gameState\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    null\n);\n  \nexport default connector(InfoBox);","import React from 'react';\nimport './App.css';\nimport  Fabrica    from '../containers/ContainerFabrica';\nimport  ToolBox    from '../containers/ContainerToolBox';\nimport  InfoBox    from '../containers/ContainerInfoBox';\n\nconst App = () => (\n\n  <div>\n     <div className=\"Container\">\n        <h1>Wayne's Tech</h1>\n        <div className=\"App\">  \n          <ToolBox/>\n          <Fabrica/>\n          <InfoBox />        \n        </div>\n      </div>\n  </div>\n);\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n","import LoginPage from '../componentsLogin/LoginPage.js';\nimport UsuarioFabricaPage from '../componentsSeleccionFabrica/ContainerUsuarioFabrica.js';\nimport App from '../components/App';\nimport React from 'react';\nimport {connect} from 'react-redux';\n\nconst RedirectPage = ({ usuario }) => {\n    if (usuario.username === 'NOT_LOGED') {\n      //Si no hay usuario logeado que vaya a la pagina de Login\n      return <LoginPage />\n    } else if (usuario.idFabricaActual === 0) {\n        //Si el usuario esta logueado pero aun no eligio con que fabrica jugar\n      return <UsuarioFabricaPage/>\n    } else {\n        //Si el usuario esta logueado y selecciono una fabrica, que vaya al juego\n      return (\n        <App />\n      )\n    }\n}\n  \n  const mapStateToProps = state => {\n    return {\n        botones: state.botones,\n        gameState: state.gameState,\n        configFabrica: state.configFabrica,\n        usuario:state.usuario\n    }\n  }\n  \n  const connector = connect(\n    mapStateToProps,\n    undefined\n  )\n  \n  export default connector(RedirectPage)\n  ","// @flow\nimport React from 'react';\nimport './index.css';\nimport { initialState } from './constants';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducer';\nimport type { Store } from './types';\n\n\nimport RedirectPage from './components/RedirectPage';\n\nconst store: Store = createStore(\n  reducers,\n  initialState,\n  compose(\n    applyMiddleware(thunk)\n      /*,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()*/\n  )\n);\n\nconst element = document.getElementById('root');\nif (!element) {\n  throw new Error(\"couldn't find element with id root\");\n}\n\nrender(\n  <Provider store={store}>\n    <RedirectPage/>\n  </Provider>,\n  element\n);\n"],"sourceRoot":""}
{"version":3,"sources":["components/images/delete.PNG","components/images/rotate.PNG","components/images/move.PNG","components/images/crafter.PNG","components/images/starter.PNG","components/images/furnace.PNG","components/images/seller.PNG","components/images/transporter.PNG","components/Maquina.js","components/Celda.js","containers/ContainerCelda.js","actions/MaquinaAction.js","components/Fila.js","components/Fabrica.js","containers/ContainerFabrica.js","components/ButtonToolBox.js","components/ToolBox.js","containers/ContainerToolBox.js","actions/ButtonAction.js","components/InfoBox.js","components/App.js","constants.js","reducer/ButtonReducer.js","reducer/FabricaReducer.js","reducer/CeldaReducer.js","reducer/index.js","index.js"],"names":["module","exports","__webpack_require__","p","getMaquinaStyle","direccion","Maquina","_ref","image","react_default","a","createElement","className","src","alt","dibujarMaquina","celdas","columna","fila","celdaActual","filter","c","id","idFila","length","undefined","maquina","src_components_Maquina","mover","Celda","onClickCelda","boton","onClick","connector","connect","state","botones","configFabrica","dispatch","idCelda","type","action","ponerMaquina","Fila","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","dibujarCeldas","i","columnas","celdaStore","filas","push","index","ContainerCelda","Component","dibujarGrilla","numeroFilas","numeroColumnas","botonSeleccionado","getBotonSelected","grilla","Fila_Fila","buttons","f","press","Fabrica","getSelectStyle","ButtonToolBox","ToolBox","onButtonToolClick","components_ButtonToolBox","selectButton","InfoBox","apply","arguments","App","ContainerToolBox","ContainerFabrica","InfoBox_InfoBox","initialState","boton_start","boton_seller","boton_crafter","boton_furnace","boton_transporter","boton_borrar","boton_rotar","boton_move","map","t","objectSpread","moverMaquina","celdaActualArray","getCeldaActual","busquedaCeldaConMaquinaAMover","celdaConMaquina","celdaCopia","celda","miraSiPoneMaquina","miraSiSacaMaquina","rotarMaquina","cambiarPosicionMaquina","borrarMaquina","combineReducers","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","element","document","getElementById","Error","render","es","src_components_App"],"mappings":"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","file":"static/js/main.fbce691c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.6e7a49f4.PNG\";","module.exports = __webpack_public_path__ + \"static/media/rotate.d45efe18.PNG\";","module.exports = __webpack_public_path__ + \"static/media/move.cbfcb2fb.PNG\";","module.exports = __webpack_public_path__ + \"static/media/crafter.42bc2297.PNG\";","module.exports = __webpack_public_path__ + \"static/media/starter.8d09d4f3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/furnace.617ec208.PNG\";","module.exports = __webpack_public_path__ + \"static/media/seller.3d538c9e.PNG\";","module.exports = __webpack_public_path__ + \"static/media/transporter.00687f2e.PNG\";","import React from 'react';\nimport './Maquina.css';\nimport type {Image} from './Utils';\nimport type {MaquinaDireccion} from './Maquina';\n\nexport type Props = {\n    image: Image,\n    direccion: MaquinaDireccion\n  };\n\n\n  const getMaquinaStyle = (direccion: MaquinaDireccion): string => {\n    switch (direccion) {\n      case 'NORTE':\n        return 'Maquina up';\n      case 'SUR':\n        return 'Maquina down';\n      case 'ESTE':\n        return 'Maquina left';\n      case 'OESTE':\n        return 'Maquina right';\n      default:\n        return 'Maquina up';\n    }\n  };\n\nexport const Maquina = ({image, direccion}): Props => (\n    <div className={getMaquinaStyle(direccion)}>\n        <img src={image} alt=\"maquina\" />\n    </div>\n);\n\nexport default Maquina;","import React from 'react';\nimport './Celda.css';\nimport type {ButtonType} from '../types/ButtonType';\nimport type {Celdas} from '../types/CeldaType';\nimport type {Id} from '../types/Utils';\nimport type {MaquinaType} from '../types/Maquina';\nimport Maquina from './Maquina';\n\n\nexport type Props = {\n    onClick: () => void,\n    boton: ButtonType,\n    fila: Id,\n    id: Id,\n    maquina: MaquinaType,\n    celdas: Celdas\n}\n\nexport const Celda = ({ onClickCelda, boton, id, fila, celdas}: Props) => (\n   \n    <div className=\"celda\" onClick={() => onClickCelda(boton, id, fila)} >\n        { dibujarMaquina(celdas, id, fila) }                             \n    </div>    \n);\n\nconst dibujarMaquina = (celdas: Celdas, columna: Id, fila: Id ) =>  {\n    let celdaActual =  celdas.filter(c => c.id === columna && c.idFila === fila);\n    if(celdaActual.length !== 0 && celdaActual[0].maquina !== undefined ){\n        return <Maquina image={celdaActual[0].maquina.image} \n                direccion={celdaActual[0].maquina.direccion}\n                mover={celdaActual[0].maquina.mover}>\n        </Maquina>\n\n    }else{\n        return ''\n    }\n}\n\nexport default Celda;","import { connect }    from 'react-redux';\nimport Celda          from '../components/Celda';\nimport type { State } from '../types';\nimport { ponerMaquina } from '../actions/MaquinaAction';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       botones: state.botones,\n       celdas: state.celdas,\n       configFabrica: state.configFabrica\n    };\n};\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n         onClickCelda: (boton, columna, fila) => {\n           dispatch(ponerMaquina(boton, columna, fila));\n      }\n    };\n};\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(Celda);","import type { ButtonType }    from '../types/ButtonType';\nimport type { Id }    from '../types/Utils';\nimport type { MaquinaAction } from '../types/Maquina';\n\nexport const ponerMaquina = (boton: ButtonType, idCelda: Id, idFila: Id): MaquinaAction => {\n  return {\n    type: (boton === undefined ? '@@INIT' : boton.action), boton, idCelda, idFila\n  };\n};\n\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\n//import { Celda } from './Celda';\nimport  Celda  from '../containers/ContainerCelda';\n//import type { ButtonType } from '../types/ButtonType';\n\nimport './Fila.css';\n\nexport class Fila extends Component {\n\n    constructor(props){\n        super (props);\n        this.state = {\n           celdas: []\n        }\n    }\n\n    render () {\n        return (\n        <div className=\"fila\">\n           { this.dibujarCeldas() }\n        </div>   \n        )\n    }  \n\n    dibujarCeldas(){\n        var celdas = [];\n        for (var i=1; i<= this.props.columnas; i++){\n\n           if(this.props.celdaStore.length < (this.props.columnas * this.props.filas)){\n              this.props.celdaStore.push({ id:i , idFila: this.props.index});\n           }\n\n           celdas.push(\n                <Celda key={i}\n                       id={i} \n                       boton={this.props.boton}  \n                       fila={this.props.index} \n                       columna={i} />\n            )\n        }\n        this.celdas= celdas;\n        return celdas;\n    }\n\n}\n\nFila.propTypes = {\n    index : PropTypes.number,\n    columnas: PropTypes.number\n}","//import React, { Component } from 'react';\nimport './Fabrica.css';\n//import { PropTypes } from 'prop-types';\nimport { Fila } from './Fila';\nimport type {ConfigFabrica} from '../types/GameState';\nimport type { Buttons }     from '../types/ButtonType';\nimport type { Celdas }     from '../types/CeldaType';\nimport React from 'react';\n\nexport type Props = {\n  configFabrica: ConfigFabrica,\n  botones: Buttons,\n  celdas: Celdas\n};\n\nexport const Fabrica = ({ configFabrica, botones, celdas }: Props) => (\n  <div className=\"grilla\">\n\n      { dibujarGrilla(configFabrica.numeroFilas, configFabrica.numeroColumnas, botones, celdas)}\n  \n  </div>  \n); \n\nconst dibujarGrilla = (numeroFilas: CantFilas, numeroColumnas: CantColumnas, botones: Buttons, celdas: Celdas) => {\n  \n  let botonSeleccionado = getBotonSelected(botones);\n\n  var grilla = [];\n  for (var i = 1; i <= numeroFilas; i++) {\n    grilla.push(\n      <Fila key={i} index={i} columnas={numeroColumnas} boton={botonSeleccionado} celdaStore={celdas} filas={numeroFilas} />\n    );\n  }\n  return grilla;\n};\n\nconst getBotonSelected = (buttons: Buttons): ButtonType => {\n  let boton =  buttons.filter(f => f.press === 'selected');\n  return (boton.length === 0 ? undefined : boton[0]);\n};\n\nexport default Fabrica;\n\n/*\nexport class Fabrica extends Component {\n  \n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      grillas: []\n    }\n  }\n\n  render() {\n    return (\n        <div className=\"grilla\">\n            {this.dibujarGrilla()}\n        </div>\n    )\n  }\n  \n  dibujarGrilla(){\n    var grilla = [];\n    for (var i = 1; i <= this.props.filas; i++) {\n      grilla.push(\n        <Fila index= {i} columnas= {this.props.columnas} />\n      );\n    }\n    this.grillas = grilla;\n    return grilla;\n  }\n\n}\n\nFabrica.propTypes = {\n  filas : PropTypes.number,\n  columnas: PropTypes.number\n}\n\nFabrica.defaultProps = { \n  filas : 6,\n  columnas: 8\n}\n\n*/","import { connect }    from 'react-redux';\nimport Fabrica        from '../components/Fabrica';\nimport type { State } from '../types';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       configFabrica: state.configFabrica,\n       botones: state.botones,\n       celdas: state.celdas\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    null\n);\n  \nexport default connector(Fabrica);\n  ","import type  { Image, Press }  from '../types/ButtonType';\nimport './ToolBox.css';\nimport React from 'react'\n\n\nconst getSelectStyle = (press: Press): string => {\n  switch (press) {\n    case 'selected':\n      return 'ButtonToolbox seleccionado';\n    case 'unselected':\n      return 'ButtonToolbox';\n    default:\n      return 'ButtonToolbox';\n  }\n};\n\nexport type Props = {\n  onClick: () => void,\n  press: Press,\n  image: Image\n};\n\nconst ButtonToolBox = ({ onClick, image, press }: Props) => (\n  <div className={getSelectStyle(press)} onClick={onClick}>\n    <img src={image} alt=\"tool\" />\n  </div>\n);\n\nexport default ButtonToolBox;\n","import React from 'react';\nimport  ButtonToolBox   from './ButtonToolBox';\nimport type { Buttons } from '../types/ButtonType';\nimport type {  Id }     from '../types/Utils';\nimport './ToolBox.css';\n\n\nexport type Props = {\n  botones: Buttons,\n  onButtonToolClick: (id: Id) => void\n};\n\n/*\nconst ToolBox = ({ botones, onButtonToolClick }: Props) => (\n  <div className=\"ToolBox\">\n    {\n      botones.map(boton => (\n        <ButtonToolBox\n          key={boton.id}\n          {...boton}\n          onClick={() => onButtonToolClick(boton.id)}\n        />\n      ))}\n  </div>\n); */\n\n\nexport const ToolBox = ({ botones, onButtonToolClick }: Props) => (\n  <div className=\"ToolBox\">\n    <h3>Máquinas</h3>\n     <table>\n       <tbody>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[0].id)}\n                           image={botones[0].image} \n                           press={botones[0].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[1].id)}\n                           image={botones[1].image} \n                           press={botones[1].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[2].id)}\n                           image={botones[2].image} \n                           press={botones[2].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[3].id)}\n                           image={botones[3].image} \n                           press={botones[3].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[4].id)}\n                           image={botones[4].image} \n                           press={botones[4].press} />\n           </td>\n         </tr>\n       </tbody>\n     </table>\n    <h3>Edición</h3>\n     <table>\n       <tbody>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[5].id)}\n                           image={botones[5].image} \n                           press={botones[5].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[6].id)}\n                           image={botones[6].image} \n                           press={botones[6].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[7].id)}\n                           image={botones[7].image} \n                           press={botones[7].press} />\n           </td>\n         </tr>\n       </tbody>\n     </table>\n  </div>\n);\n\n\nexport default ToolBox;","import { connect } from 'react-redux';\nimport { selectButton } from '../actions/ButtonAction';\nimport  ToolBox         from '../components/ToolBox';\n\nimport type { State, Dispatch } from '../types';\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       botones: state.botones\n    };\n  };\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        onButtonToolClick: id => {\n            dispatch(selectButton(id));\n      }\n    };\n};\n  \nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(ToolBox);\n  ","import type { Id, ButtonAction } from '../types/ButtonType';\n\nexport const selectButton = (id: Id): ButtonAction => {\n  return {\n    type: 'SELECT',\n    id\n  };\n};\n","import React, { Component } from 'react';\nimport './InfoBox.css';\n\nexport class InfoBox extends Component {\n  \n  render() {\n    return (\n        <div className=\"Infobox\">\n            <h2>infobox </h2>\n        </div>\n    )\n  }\n}\n\n\n","import React from 'react';\nimport './App.css';\nimport  Fabrica    from '../containers/ContainerFabrica';\nimport  ToolBox    from '../containers/ContainerToolBox';\nimport { InfoBox } from './InfoBox';\n\nconst App = () => (\n  <div>\n     <div className=\"Container\">\n        <h1>Wayne's Tech</h1>\n        <div className=\"App\">  \n          <ToolBox/>\n          <Fabrica/>\n          <InfoBox />        \n        </div>\n      </div>\n  </div>\n);\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n","import boton_borrar      from './components/images/delete.PNG';\nimport boton_rotar       from './components/images/rotate.PNG';\nimport boton_move        from './components/images/move.PNG';\nimport boton_crafter     from './components/images/crafter.PNG';\nimport boton_start       from './components/images/starter.PNG';\nimport boton_furnace     from './components/images/furnace.PNG';\nimport boton_seller      from './components/images/seller.PNG';\nimport boton_transporter from './components/images/transporter.PNG';\n\nexport const initialState = {\n    botones: [\n        {image:boton_start,       press:\"unselected\", id:1, action:\"AGREGAR_MAQUINA\"},\n        {image:boton_seller,      press:\"unselected\", id:2, action:\"AGREGAR_MAQUINA\"},\n        {image:boton_crafter,     press:\"unselected\", id:3, action:\"AGREGAR_MAQUINA\"},\n        {image:boton_furnace,     press:\"unselected\", id:4, action:\"AGREGAR_MAQUINA\"},\n        {image:boton_transporter, press:\"unselected\", id:5, action:\"AGREGAR_MAQUINA\"},\n        {image:boton_borrar,      press:\"unselected\", id:6, action:\"BORRAR\"},\n        {image:boton_rotar,       press:\"unselected\", id:7, action:\"ROTAR\"},\n        {image:boton_move,        press:\"unselected\", id:8, action:\"MOVER\"}\n    ],\n    configFabrica: {\n       numeroFilas: 10,\n       numeroColumnas: 8\n    },\n    celdas: []\n  };\n  ","\n import { Id, Buttons } from '../types/ButtonType';\n import type { Action } from '../types';\n\nconst selectButton = (botones: Buttons, id: Id): Buttons => {\n\n  return botones.map(t => (t.id !== id ? { ...t, press: 'unselected' } : { ...t, press: 'selected' }));\n\n};\n\n\nconst botones = (state: Buttons = [], action: Action): Buttons => {\n\n  switch (action.type) {\n    case '@@INIT':\n      return state;\n    case 'SELECT':\n      return selectButton(state, action.id);\n    default:\n      return state;\n  }\n};\n\n\nexport default botones;\n","import { ConfigFabrica } from '../types/GameState';\nimport type { Action } from '../types';\n\n\n\nconst configFabrica = (state: ConfigFabrica = {}, action: Action): ConfigFabrica => {\n\n switch (action.type) {\n   case '@@INIT':\n     return state;\n   default:\n     return state;\n }\n};\n\nexport default configFabrica;","import { Id } from '../types/ButtonType';\nimport type { MaquinaAction, Celdas } from '../types';\n\n\nconst celdas = (state: Celdas = [], action: MaquinaAction): Celdas => {\n    switch (action.type) {\n      case 'AGREGAR_MAQUINA':\n        return ponerMaquina(state, action.boton, action.idCelda, action.idFila);\n      case 'ROTAR':\n        return rotarMaquina(state, action.boton, action.idCelda, action.idFila);\n      case 'BORRAR':\n        return borrarMaquina(state, action.boton, action.idCelda, action.idFila);\n      case 'MOVER':\n        return moverMaquina(state, action.boton, action.idCelda, action.idFila);\n      default:\n        return state;\n    }\n};\n\nconst getCeldaActual = (celdas: Celdas, columna: Id, fila: Id): Celda => {\n  let celdaActualArray =  celdas.filter(c => c.id === columna && c.idFila === fila);\n  if(celdaActualArray.length !== 0){\n    return celdaActualArray[0];\n  }else{\n    return undefined;\n  }\n}\n\nconst miraSiSacaMaquina = (celdaConMaquina: Celda, celdaActual: Celda): Celda => {\n  if(celdaConMaquina.id === celdaActual.id && celdaConMaquina.idFila === celdaActual.idFila && celdaActual.maquina.mover){\n    celdaActual.maquina = undefined;\n  }\n  return celdaActual;\n}\n\nconst miraSiPoneMaquina = (celda: Celda, columna: Id, fila: Id, celdaConMaquina: Celda): Celda => {\n  if(celda.id === columna && celda.idFila === fila && celdaConMaquina !== undefined){\n    celda.maquina = {direccion: celdaConMaquina.maquina.direccion, \n                     image: celdaConMaquina.maquina.image, \n                     mover: false}\n  }\n  return celda;\n}\n\nconst moverMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n    const celdaActual = getCeldaActual(celdas,columna, fila);\n    if(celdaActual.maquina !== undefined ){\n       celdaActual.maquina.mover = true;\n       return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n       celdaActual : c ));\n    }else{\n       \n       let busquedaCeldaConMaquinaAMover =  celdas.filter(c => c.maquina !== undefined && c.maquina.mover);\n       let celdaConMaquina = busquedaCeldaConMaquinaAMover[busquedaCeldaConMaquinaAMover.length - 1];\n       if(celdaConMaquina !== undefined){\n        const celdaCopia = {\n          id: celdaConMaquina.id,\n          idFila: celdaConMaquina.idFila,\n          maquina: {\n            direccion: celdaConMaquina.maquina.direccion,\n            image: celdaConMaquina.maquina.image\n          }\n        } \n        return celdas.map(c => ( c.maquina === undefined ? \n        miraSiPoneMaquina(c, columna, fila,celdaCopia ) : \n        miraSiSacaMaquina(celdaConMaquina, c)));\n       }\n       return celdas;\n    }\n};\n\n\n/* ROTA UNA MAQUINA */\nconst rotarMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n  return celdas.map(c => ( c.id === columna && c.idFila === fila && c.maquina !== undefined ? \n    { ...c, maquina: cambiarPosicionMaquina(c.maquina) } : c ));\n}\n\nconst cambiarPosicionMaquina = (maquina: MaquinaType): MaquinaType =>{\n  switch (maquina.direccion) {\n    case 'NORTE':\n      maquina.direccion = 'ESTE';\n      break;\n    case 'ESTE':\n      maquina.direccion = 'SUR';\n      break;\n    case 'SUR':\n      maquina.direccion = 'OESTE';\n      break;\n    case 'OESTE':\n      maquina.direccion = 'NORTE';\n      break;\n    default:\n  }\n  return maquina;\n}\n\n/* PONE UNA MAQUINA */\nconst ponerMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n    return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n    { ...c, maquina: { image: boton.image, direccion: 'SUR', mover: false }} : c ));\n};\n\n/* BORRA UNA MAQUINA */\nconst borrarMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n  return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n    { ...c, maquina: undefined } : c ));\n};\n\n\n   export default celdas;","import { combineReducers } from 'redux';\n\nimport botones from './ButtonReducer';\nimport configFabrica from  './FabricaReducer';\nimport celdas from './CeldaReducer';\n\nexport default combineReducers({\n    botones, // TODO: add more reducers here if needed\n    configFabrica,\n    celdas\n \n});\n","// @flow\n\nimport React from 'react';\n//import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n//import * as serviceWorker from './serviceWorker';\n\n/*\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n*/\n\n\nimport { initialState } from './constants';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from './reducer';\nimport type { Store } from './types';\n\nconst store: Store = createStore(\n  reducers,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ trace: true, traceLimit: 25 })\n);\n\nconst element = document.getElementById('root');\nif (!element) {\n  throw new Error(\"couldn't find element with id root\");\n}\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  element\n);"],"sourceRoot":""}
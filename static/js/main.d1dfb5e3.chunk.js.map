{"version":3,"sources":["components/images/delete.PNG","components/images/rotate.PNG","components/images/move.PNG","components/images/crafter.PNG","components/images/starter.PNG","components/images/furnace.PNG","components/images/seller.PNG","components/images/transporter.PNG","components/Maquina.js","components/Celda.js","containers/ContainerCelda.js","actions/MaquinaAction.js","components/Fila.js","components/TickButton.js","containers/ContainerTickButton.js","components/Fabrica.js","containers/ContainerFabrica.js","components/ButtonToolBox.js","components/ToolBox.js","containers/ContainerToolBox.js","actions/ButtonAction.js","components/InfoBox.js","containers/ContainerInfoBox.js","components/App.js","constants.js","reducer/ButtonReducer.js","reducer/FabricaReducer.js","reducer/CeldaReducer.js","reducer/index.js","index.js"],"names":["module","exports","__webpack_require__","p","getMaquinaStyle","direccion","Maquina","_ref","image","react_default","a","createElement","className","src","alt","dibujarMaquina","celdas","columna","fila","celdaActual","filter","c","id","idFila","length","undefined","maquina","src_components_Maquina","mover","Celda","onClickCelda","boton","gameState","onClick","connector","connect","state","botones","configFabrica","dispatch","idCelda","ganancias","type","action","ponerMaquina","doActionsOnSelection","Fila","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inherits","createClass","key","value","dibujarCeldas","i","columnas","celdaStore","filas","push","index","ContainerCelda","Component","TickButton","tickMaquinas","setInterval","dibujarGrilla","numeroFilas","numeroColumnas","botonSeleccionado","buttons","f","press","getBotonSelected","grilla","Fila_Fila","Fabrica","ContainerTickButton","getSelectStyle","ButtonToolBox","ToolBox","onButtonToolClick","components_ButtonToolBox","name","price","selectButton","InfoBox","apply","arguments","statusInfoBox","detalle","costo","App","ContainerToolBox","ContainerFabrica","ContainerInfoBox","initialState","boton_start","boton_seller","boton_crafter","boton_furnace","boton_transporter","boton_borrar","boton_rotar","boton_move","map","t","objectSpread","newState","infoBox","transportar","nextCelda","celda","x","y","getNextCelda","console","log","materiales","moverMaterial","includes","celdasNuevas","moverMaquina","celdaActualArray","getCeldaActual","busquedaCeldaConMaquinaAMover","celdaConMaquina","celdaCopia","miraSiPoneMaquina","miraSiSacaMaquina","rotarMaquina","cambiarPosicionMaquina","borrarMaquina","combineReducers","store","createStore","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","trace","traceLimit","element","document","getElementById","Error","render","es","src_components_App"],"mappings":"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","file":"static/js/main.d1dfb5e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/delete.6e7a49f4.PNG\";","module.exports = __webpack_public_path__ + \"static/media/rotate.d45efe18.PNG\";","module.exports = __webpack_public_path__ + \"static/media/move.cbfcb2fb.PNG\";","module.exports = __webpack_public_path__ + \"static/media/crafter.42bc2297.PNG\";","module.exports = __webpack_public_path__ + \"static/media/starter.8d09d4f3.PNG\";","module.exports = __webpack_public_path__ + \"static/media/furnace.617ec208.PNG\";","module.exports = __webpack_public_path__ + \"static/media/seller.3d538c9e.PNG\";","module.exports = __webpack_public_path__ + \"static/media/transporter.00687f2e.PNG\";","import React from 'react';\nimport './Maquina.css';\nimport type {Image} from './Utils';\nimport type {MaquinaDireccion} from './Maquina';\n\nexport type Props = {\n    image: Image,\n    direccion: MaquinaDireccion\n  };\n\n\n  const getMaquinaStyle = (direccion: MaquinaDireccion): string => {\n    switch (direccion) {\n      case 'NORTE':\n        return 'Maquina up';\n      case 'SUR':\n        return 'Maquina down';\n      case 'ESTE':\n        return 'Maquina left';\n      case 'OESTE':\n        return 'Maquina right';\n      default:\n        return 'Maquina up';\n    }\n  };\n\nexport const Maquina = ({image, direccion}): Props => (\n    <div className={getMaquinaStyle(direccion)}>\n        <img src={image} alt=\"maquina\" />\n    </div>\n);\n\nexport default Maquina;","import React from 'react';\nimport './Celda.css';\nimport type {ButtonType} from '../types/ButtonType';\nimport type {Celdas} from '../types/CeldaType';\nimport type {GameType} from '../types/GameState';\nimport type {Id} from '../types/Utils';\nimport type {MaquinaType} from '../types/Maquina';\nimport Maquina from './Maquina';\n\n\nexport type Props = {\n    onClick: () => void,\n    boton: ButtonType,\n    fila: Id,\n    id: Id,\n    maquina: MaquinaType,\n    gameState: GameType\n}\n\nexport const Celda = ({ onClickCelda, boton, id, fila, gameState}: Props) => (\n    \n    <div className=\"celda\" onClick={() => onClickCelda(boton, id, fila)} >\n        { dibujarMaquina(gameState.celdas, id, fila) }                             \n    </div>    \n);\n\nconst dibujarMaquina = (celdas: Celdas, columna: Id, fila: Id ) =>  {\n\n    let celdaActual =  celdas.filter(c => c.id === columna && c.idFila === fila);\n    if(celdaActual.length !== 0 && celdaActual[0].maquina !== undefined ){\n\n        return <Maquina image={celdaActual[0].maquina.image} \n                direccion={celdaActual[0].maquina.direccion}\n                mover={celdaActual[0].maquina.mover}>\n               </Maquina>\n\n    }else{\n        return  <div>{celdaActual[0].id + \" \" + celdaActual[0].idFila}</div>\n    }\n}\n\n\n\n\nexport default Celda;","import { connect }    from 'react-redux';\nimport Celda          from '../components/Celda';\nimport type { State, Dispatch } from '../types';\nimport { ponerMaquina} from '../actions/MaquinaAction';\n\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       botones: state.botones,\n       gameState: state.gameState,\n       configFabrica: state.configFabrica\n    }\n};\n\nconst doActionsOnSelection = (boton, columna, fila, dispatch) => {\n \n    //setInterval(() => { dispatch(tick());} , 3000);\n    return(\n       ponerMaquina(boton, columna, fila)\n   )\n};\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n         onClickCelda: (boton, columna, fila) => {\n           dispatch(doActionsOnSelection(boton, columna, fila,dispatch))\n      }\n    };\n};\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(Celda);","import type { ButtonType }    from '../types/ButtonType';\nimport type { Id }    from '../types/Utils';\nimport type { MaquinaAction } from '../types/Maquina';\nimport type { Ganancias } from '../types/GameState';\n\nexport const ponerMaquina = (boton: ButtonType, idCelda: Id, idFila: Id, ganancias: Ganancias): MaquinaAction => {\n  return {\n    type: (boton === undefined ? '@@INIT' : boton.action), boton, idCelda, idFila, ganancias\n  };\n};\n\nexport const tick = (): MaquinaAction => {\n  return {\n    type: 'TICK'\n  };\n};\n\n","import React, { Component } from 'react';\nimport { PropTypes } from 'prop-types';\nimport  Celda  from '../containers/ContainerCelda';\n\n\nimport './Fila.css';\n\nexport class Fila extends Component {\n\n    constructor(props){\n        super (props);\n        this.state = {\n           celdas: []\n        }\n    }\n\n    render () {\n        return (\n        <div className=\"fila\">\n           { this.dibujarCeldas() }\n        </div>   \n        )\n    }  \n\n    dibujarCeldas(){\n        var celdas = [];\n        for (var i=1; i<= this.props.columnas; i++){\n           //Inserta las celdas en el estate inicial\n           if(this.props.celdaStore.length < (this.props.columnas * this.props.filas)){\n              this.props.celdaStore.push({ id:i , idFila: this.props.index});\n           }\n\n           celdas.push(\n                <Celda key={i}\n                       id={i} \n                       boton={this.props.boton}  \n                       fila={this.props.index} \n                       columna={i} />\n            )\n        }\n        this.celdas= celdas;\n        return celdas;\n    }\n\n}\n\nFila.propTypes = {\n    index : PropTypes.number,\n    columnas: PropTypes.number\n}","import React from 'react';\n\nexport type Props = {\n    onClick: () => void\n}\n\nexport const TickButton = ({ tickMaquinas }: Props) => (\n    <div>\n        <button type=\"button\" className=\"tickButton\" onClick={() => tickMaquinas()} >\n        Start!\n        </button>\n    </div>\n); \n\n\nexport default TickButton;","import { connect }    from 'react-redux';\nimport TickButton     from '../components/TickButton';\nimport type { State,Dispatch } from '../types';\nimport {tick } from '../actions/MaquinaAction';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       gameState: state.gameState,\n       botones: state.botones,\n       configFabrica: state.configFabrica\n\n    };\n};\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        tickMaquinas: () => {\n            setInterval(() => { dispatch(tick());} , 3000);\n      }\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(TickButton);\n  ","import './Fabrica.css';\nimport { Fila } from './Fila';\nimport type {ConfigFabrica, GameType} from '../types/GameState';\nimport type { Buttons }     from '../types/ButtonType';\n//import type { Celdas }      from '../types/CeldaType';\nimport React from 'react';\nimport TickButton  from '../containers/ContainerTickButton';\n \n\nexport type Props = {\n  configFabrica: ConfigFabrica,\n  botones: Buttons,\n  gameState: GameType\n};\n\nexport const Fabrica = ({ configFabrica, botones, gameState }: Props) => (\n  <div className=\"grilla\">\n      \n      { dibujarGrilla(configFabrica.numeroFilas, configFabrica.numeroColumnas, botones, gameState)}\n      <TickButton/>\n  </div> \n   \n); \n\nconst getBotonSelected = (buttons: Buttons): ButtonType => {\n  let boton =  buttons.filter(f => f.press === 'selected');\n  return (boton.length === 0 ? undefined : boton[0]);\n};\n\nconst dibujarGrilla = (numeroFilas: CantFilas, numeroColumnas: CantColumnas, botones: Buttons, gameState: GameType) => {\n  \n  let botonSeleccionado = getBotonSelected(botones);\n\n  var grilla = [];\n  for (var i = 1; i <= numeroFilas; i++) {\n    grilla.push(\n      <Fila key={i} index={i} columnas={numeroColumnas} boton={botonSeleccionado} celdaStore={gameState.celdas} filas={numeroFilas} />\n    );\n  }\n  return grilla;\n};\n\n\nexport default Fabrica;\n","import { connect }    from 'react-redux';\nimport Fabrica        from '../components/Fabrica';\nimport type { State } from '../types';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       gameState: state.gameState,\n       botones: state.botones,\n       configFabrica: state.configFabrica\n\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    null\n);\n  \nexport default connector(Fabrica);\n  ","import type  { Image, Press }  from '../types/ButtonType';\nimport './ToolBox.css';\nimport React from 'react'\n\n\nconst getSelectStyle = (press: Press): string => {\n  switch (press) {\n    case 'selected':\n      return 'ButtonToolbox seleccionado';\n    case 'unselected':\n      return 'ButtonToolbox';\n    default:\n      return 'ButtonToolbox';\n  }\n};\n\nexport type Props = {\n  onClick: () => void,\n  press: Press,\n  image: Image\n};\n\nconst ButtonToolBox = ({ onClick, image, press }: Props) => (\n  <div className={getSelectStyle(press)} onClick={onClick}>\n    <img src={image} alt=\"tool\" />\n  </div>\n);\n\nexport default ButtonToolBox;\n","import React from 'react';\nimport  ButtonToolBox   from './ButtonToolBox';\nimport type { Buttons } from '../types/ButtonType';\nimport type {  Id }     from '../types/Utils';\nimport './ToolBox.css';\n\n\nexport type Props = {\n  botones: Buttons,\n  onButtonToolClick: (id: Id) => void\n};\n\n\nexport const ToolBox = ({ botones, onButtonToolClick }: Props) => (\n  <div className=\"ToolBox\">\n    <h3>Máquinas</h3>\n     <table>\n       <tbody>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[0].id, botones[0].name, botones[0].price)}\n                           image={botones[0].image} \n                           press={botones[0].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[1].id, botones[1].name, botones[1].price)}\n                           image={botones[1].image} \n                           press={botones[1].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[2].id, botones[2].name, botones[2].price)}\n                           image={botones[2].image} \n                           press={botones[2].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[3].id, botones[3].name, botones[3].price)}\n                           image={botones[3].image} \n                           press={botones[3].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[4].id, botones[4].name, botones[4].price)}\n                           image={botones[4].image} \n                           press={botones[4].press} />\n           </td>\n         </tr>\n       </tbody>\n     </table>\n    <h3>Edición</h3>\n     <table>\n       <tbody>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[5].id, botones[5].name, botones[5].price)}\n                           image={botones[5].image} \n                           press={botones[5].press} />\n           </td>\n           <td>\n           <ButtonToolBox onClick={() => onButtonToolClick(botones[6].id, botones[6].name, botones[6].price)}\n                           image={botones[6].image} \n                           press={botones[6].press} />\n           </td>\n         </tr>\n         <tr>\n           <td>\n            <ButtonToolBox onClick={() => onButtonToolClick(botones[7].id, botones[7].name, botones[7].price)}\n                           image={botones[7].image} \n                           press={botones[7].press} />\n           </td>\n         </tr>\n       </tbody>\n     </table>\n  </div>\n);\n\n\nexport default ToolBox;","import { connect } from 'react-redux';\nimport { selectButton } from '../actions/ButtonAction';\nimport  ToolBox         from '../components/ToolBox';\n\nimport type { State, Dispatch } from '../types';\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       botones: state.botones\n    };\n  };\n\n\nexport const mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        onButtonToolClick: (id, name, price) => {\n            dispatch(selectButton(id, name, price));\n      }\n    };\n};\n  \nconst connector = connect(\n    mapStateToProps,\n    mapDispatchToProps\n);\n  \nexport default connector(ToolBox);\n  ","import type { Id, ButtonAction } from '../types/ButtonType';\nimport type { DetalleMaquina, CostoMaquina } from '../types/GameState';\n\nexport const selectButton = (id: Id, name: DetalleMaquina , price: CostoMaquina): ButtonAction => {\n  return {\n    type: 'SELECT',\n    id, name, price\n  };\n};\n","import React, { Component } from 'react';\nimport './InfoBox.css';\n\nexport class InfoBox extends Component {\n  \n  render() {\n    return (\n        <div className=\"Infobox\">\n            <h3>Detalles</h3>\n            <div className=\"InfoBoxContenido\">\n              <h2> Ganancias: {\"$ \"+this.props.gameState.statusInfoBox.ganancias + \",00\"}</h2>\n                <div>\n                  {this.props.gameState.statusInfoBox.detalle}\n                </div>\n                <div>\n                  <div>\n                  {(this.props.gameState.statusInfoBox.costo > 0 ? \"$ \"+this.props.gameState.statusInfoBox.costo + \",00\" : '')}                  \n                  </div>\n                </div>\n            </div>\n        </div>\n    )\n  }\n}\n\nexport default InfoBox;\n\n\n","import { connect }    from 'react-redux';\nimport InfoBox        from '../components/InfoBox';\nimport type { State } from '../types';\n\n\nexport const mapStateToProps = (state: State) => {\n    return {\n       configFabrica: state.configFabrica,\n       botones: state.botones,\n       gameState: state.gameState\n    };\n};\n\n\nconst connector = connect(\n    mapStateToProps,\n    null\n);\n  \nexport default connector(InfoBox);","import React from 'react';\nimport './App.css';\nimport  Fabrica    from '../containers/ContainerFabrica';\nimport  ToolBox    from '../containers/ContainerToolBox';\nimport  InfoBox    from '../containers/ContainerInfoBox';\n\nconst App = () => (\n\n  <div>\n     <div className=\"Container\">\n        <h1>Wayne's Tech</h1>\n        <div className=\"App\">  \n          <ToolBox/>\n          <Fabrica/>\n          <InfoBox />        \n        </div>\n      </div>\n  </div>\n);\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n","import boton_borrar      from './components/images/delete.PNG';\nimport boton_rotar       from './components/images/rotate.PNG';\nimport boton_move        from './components/images/move.PNG';\nimport boton_crafter     from './components/images/crafter.PNG';\nimport boton_start       from './components/images/starter.PNG';\nimport boton_furnace     from './components/images/furnace.PNG';\nimport boton_seller      from './components/images/seller.PNG';\nimport boton_transporter from './components/images/transporter.PNG';\n\nexport const initialState = {\n    botones: [\n        {image:boton_start,       press:\"unselected\", id:1, action:\"AGREGAR_MAQUINA\", name:\"Starter\",  price:600 },\n        {image:boton_seller,      press:\"unselected\", id:2, action:\"AGREGAR_MAQUINA\", name:\"Seller\" ,  price:350 },\n        {image:boton_crafter,     press:\"unselected\", id:3, action:\"AGREGAR_MAQUINA\", name:\"Crafter\",  price:450 },\n        {image:boton_furnace,     press:\"unselected\", id:4, action:\"AGREGAR_MAQUINA\", name:\"Furnace\",  price:300},\n        {image:boton_transporter, press:\"unselected\", id:5, action:\"AGREGAR_MAQUINA\", name:\"Transporter\", price:100},\n        {image:boton_borrar,      press:\"unselected\", id:6, action:\"BORRAR\", name:\"\", price:0},\n        {image:boton_rotar,       press:\"unselected\", id:7, action:\"ROTAR\",  name:\"\", price:0},\n        {image:boton_move,        press:\"unselected\", id:8, action:\"MOVER\",  name:\"\", price:0}\n    ],\n    configFabrica: {\n       numeroFilas: 10,\n       numeroColumnas: 8\n    },\n    gameState: {\n        celdas: [],\n        statusInfoBox: {\n            detalle: \"\",\n            costo: 0,\n            ganancias: 5000\n        }\n    }\n  };\n  ","\n import { Id, Buttons } from '../types/ButtonType';\n import type { Action } from '../types';\n\nconst selectButton = (botones: Buttons, id: Id): Buttons => {\n\n  return botones.map(t => (t.id !== id ? { ...t, press: 'unselected' } : { ...t, press: 'selected' }));\n\n};\n\n\nconst botones = (state: Buttons = [], action: Action): Buttons => {\n  switch (action.type) {\n    case 'SELECT':\n      return selectButton(state, action.id);\n    default:\n      return state;\n  }\n};\n\n\n\nexport default botones;\n","import { ConfigFabrica } from '../types/GameState';\nimport type { Action } from '../types';\n\n\n\nconst configFabrica = (state: ConfigFabrica = {}, action: Action): ConfigFabrica => {\n\n switch (action.type) {\n   case '@@INIT':\n     return state;\n   default:\n     return state;\n }\n};\n\nexport default configFabrica;","import { Id } from '../types/ButtonType';\nimport type { MaquinaAction, Celdas } from '../types';\nimport type { GameType, StatusInfoBox } from '../types/GameState';\n\n\nconst gameState = (state: GameType = [], action: MaquinaAction): GameType => {\n   \n    switch (action.type) {\n      case 'AGREGAR_MAQUINA':\n        return newState(ponerMaquina(state.celdas, action.boton, action.idCelda, action.idFila, state.statusInfoBox)\n                        , state.statusInfoBox);\n      case 'ROTAR':\n        return newState(rotarMaquina(state.celdas, action.boton, action.idCelda, action.idFila), state.statusInfoBox);\n      case 'BORRAR':\n        return newState(borrarMaquina(state.celdas, action.boton, action.idCelda, action.idFila), state.statusInfoBox);\n      case 'MOVER':\n        return newState(moverMaquina(state.celdas, action.boton, action.idCelda, action.idFila), state.statusInfoBox);\n      case 'TICK':\n        return newState(tickMaquinas(state.celdas, state.statusInfoBox), state.statusInfoBox);\n      default:\n        return state;\n    }\n};\n\nconst newState = (celdas: Celdas, infoBox: StatusInfoBox): GameType => {\n  return {\n            celdas: celdas,\n            statusInfoBox: infoBox\n  }\n}\n\n/* ****************************************TICK DE MAQUINAS*************************************************** */\n\nconst getNextCelda = (celda: Celda, celdas: Celdas): Celda => {\n\n        var x = celda.id;\n        var y = celda.idFila;\n        if(celda.maquina !== undefined){\n          switch (celda.maquina.direccion) {\n            case 'SUR':\n              x = x + 1;\n              break; \n            case 'NORTE':\n              x = x - 1;\n              break;\n            case 'OESTE':\n              y = y - 1;\n              break;\n            default:\n              y = y + 1;\n              break;\n          }\n          return celdas.filter( c => c.id === x  && c.idFila === y )[0];\n        }else{\n          return celda;\n        }\n   \n}\n\nconst transportar = (c: Celda, celdas: Celdas) => {\n          //Busca a la siguiente celda para ver si se los puede pasar\n          const nextCelda = getNextCelda(c, celdas);\n          //Si la siguiente celda tiene maquina, se los pasa\n          if(nextCelda !== undefined && nextCelda.maquina !== undefined){\n            console.log(\"maquina \"+c.id+\" \"+c.idFila+\" paso \"+c.maquina.materiales+ \n            \" a maquina \"+nextCelda.id+\" \"+nextCelda.idFila);\n            nextCelda.maquina.materiales = nextCelda.maquina.materiales + c.maquina.materiales;\n          }\n          //tenga proxima maquina o no, bota los materiales (se les caen :P) \n          c.maquina.materiales = 0;\n}\n\nconst moverMaterial = (c: Celda, celdas: Celdas, infoBox: StatusInfoBox): Celda => {\n\n    if(c.maquina.image.includes('starter')){\n        /* ********************************* STARTER ***********************************/\n        //Si la maquina es un starter, ve si tiene materiales\n        if(c.maquina.materiales > 0){\n            console.log(\"starter \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n            transportar(c, celdas);\n            console.log(\"starter \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n        }else{\n          //Si no tiene uno, lo crea y lo retiene\n          c.maquina.materiales = c.maquina.materiales + 1;\n        }\n        /* ********************************* STARTER ***********************************/\n    }else{\n      /* ********************************* TRANSPORTER **********************************/\n      if(c.maquina.image.includes('transporter')){\n        //Si la maquina tiene materiales, los trata de pasar a la siguiente celda\n        //Si no tiene, nada hace!\n        if(c.maquina.materiales > 0){\n          console.log(\"trans \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n          transportar(c, celdas);\n          console.log(\"trans \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n        }\n        /* ********************************* TRANSPORTER **********************************/\n      }else{\n        if(c.maquina.image.includes('seller')){\n          if(c.maquina.materiales > 0){\n             console.log(\"seller \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n             infoBox.ganancias = infoBox.ganancias + (c.maquina.materiales * 10);\n             c.maquina.materiales = 0;\n             console.log(\"seller \"+c.id+\" \"+c.idFila+\" tiene \"+c.maquina.materiales);\n          }\n        }\n      }\n      \n    }\n    return c;\n}\n\n/* TICKEAR UNA MAQUINA */\nconst tickMaquinas = (celdas: Celdas, infoBox: StatusInfoBox): Celdas => {\n   \n    const celdasNuevas = [];\n    for (var i = 0; i <= celdas.length - 1 ; i++) {\n \n      if(celdas[i].maquina !== undefined){\n        celdasNuevas.push(moverMaterial(celdas[i], celdas, infoBox));\n      }else{\n        celdasNuevas.push(celdas[i]);\n      }\n    }\n \n    return celdasNuevas;\n\n}\n\n/* ****************************************ACCIONES DE CELDAS*************************************************** */\n\nconst getCeldaActual = (celdas: Celdas, columna: Id, fila: Id): Celda => {\n  let celdaActualArray =  celdas.filter(c => c.id === columna && c.idFila === fila);\n  if(celdaActualArray.length !== 0){\n    return celdaActualArray[0];\n  }else{\n    return undefined;\n  }\n}\n\nconst miraSiSacaMaquina = (celdaConMaquina: Celda, celdaActual: Celda): Celda => {\n  if(celdaConMaquina.id === celdaActual.id && celdaConMaquina.idFila === celdaActual.idFila && celdaActual.maquina.mover){\n    celdaActual.maquina = undefined;\n  }\n  return celdaActual;\n}\n\nconst miraSiPoneMaquina = (celda: Celda, columna: Id, fila: Id, celdaConMaquina: Celda): Celda => {\n  if(celda.id === columna && celda.idFila === fila && celdaConMaquina !== undefined){\n    celda.maquina = {direccion: celdaConMaquina.maquina.direccion, \n                     image: celdaConMaquina.maquina.image, \n                     mover: false,\n                     materiales:celdaConMaquina.maquina.materiales }\n  }\n  return celda;\n}\n\n/* MOVER UNA MAQUINA */\nconst moverMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n    const celdaActual = getCeldaActual(celdas,columna, fila);\n    if(celdaActual.maquina !== undefined ){\n       celdaActual.maquina.mover = true;\n       return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n       celdaActual : c ));\n    }else{\n       \n       let busquedaCeldaConMaquinaAMover =  celdas.filter(c => c.maquina !== undefined && c.maquina.mover);\n       let celdaConMaquina = busquedaCeldaConMaquinaAMover[busquedaCeldaConMaquinaAMover.length - 1];\n       if(celdaConMaquina !== undefined){\n        const celdaCopia = {\n          id: celdaConMaquina.id,\n          idFila: celdaConMaquina.idFila,\n          maquina: {\n            direccion: celdaConMaquina.maquina.direccion,\n            image: celdaConMaquina.maquina.image,\n            materiales: celdaConMaquina.maquina.materiales\n          }\n        } \n        return celdas.map(c => ( c.maquina === undefined ? \n        miraSiPoneMaquina(c, columna, fila,celdaCopia ) : \n        miraSiSacaMaquina(celdaConMaquina, c)));\n       }\n       return celdas;\n    }\n};\n\n\n/* ROTA UNA MAQUINA */\nconst rotarMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n  return celdas.map(c => ( c.id === columna && c.idFila === fila && c.maquina !== undefined ? \n    { ...c, maquina: cambiarPosicionMaquina(c.maquina) } : c ));\n}\n\nconst cambiarPosicionMaquina = (maquina: MaquinaType): MaquinaType =>{\n  switch (maquina.direccion) {\n    case 'NORTE':\n      maquina.direccion = 'ESTE';\n      break;\n    case 'ESTE':\n      maquina.direccion = 'SUR';\n      break;\n    case 'SUR':\n      maquina.direccion = 'OESTE';\n      break;\n    case 'OESTE':\n      maquina.direccion = 'NORTE';\n      break;\n    default:\n  }\n  return maquina;\n}\n\n/* PONE UNA MAQUINA */\nconst ponerMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id, infoBox: StatusInfoBox): Celdas => {\n    if(infoBox.ganancias >= boton.price){\n      infoBox.ganancias = infoBox.ganancias - boton.price;\n      return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n      { ...c, maquina: { image: boton.image, direccion: 'SUR', mover: false, materiales:0 }} : c ));\n    }else{\n      return celdas;\n    }\n};\n\n/* BORRA UNA MAQUINA */\nconst borrarMaquina = (celdas: Celdas, boton: ButtonType, columna: Id, fila: Id): Celdas => {\n  return celdas.map(c => ( c.id === columna && c.idFila === fila ? \n    { ...c, maquina: undefined } : c ));\n};\n\n\n   export default gameState;","import { combineReducers } from 'redux';\n\nimport botones from './ButtonReducer';\nimport configFabrica from  './FabricaReducer';\nimport gameState from './CeldaReducer';\n\nexport default combineReducers({\n    botones, \n    configFabrica,\n    gameState\n \n});\n","// @flow\n\nimport React from 'react';\n//import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n//import * as serviceWorker from './serviceWorker';\n\n/*\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n*/\n\n\nimport { initialState } from './constants';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducers from './reducer';\nimport type { Store } from './types';\n\nconst store: Store = createStore(\n  reducers,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ trace: true, traceLimit: 25 })\n);\n\nconst element = document.getElementById('root');\nif (!element) {\n  throw new Error(\"couldn't find element with id root\");\n}\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  element\n);"],"sourceRoot":""}